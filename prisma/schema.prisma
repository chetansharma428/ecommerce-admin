// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String     @db.ObjectId
  store     store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId // Foreign Key to Store
  store     store    @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products    Product[] // Relation to Product model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String   @db.ObjectId // Foreign Key to Store
  store     store    @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products    Product[] // Relation to Product model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    @db.ObjectId// Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    @db.ObjectId// Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    @db.ObjectId// Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}
model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId  // Foreign Key to Store
  store       store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId// Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId// Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}